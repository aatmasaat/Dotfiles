#!/bin/bash

alias ls='ls --color=auto --group-directories-first'
alias la='ls -lAh --group-directories-first'
alias ll='ls -lh --group-directories-first'
alias lh='ls -ld --group-directories-first .?*'
alias rm='rm -i'
alias vim='nvim'
alias img='sxiv -f'
alias grep='grep --color=auto'
alias yt='yt-dlp --config-location=~/.config/youtube-dl/config'
alias ds='du -sh ./* | sort -h; du -sh'
alias myip='curl https://ipinfo.io/ip;echo'
alias ez='nvim ~/.config/zsh/.zshrc'
alias ep='nvim ~/.zprofile'
alias et='nvim ~/.config/tmux/tmux.conf'

# Function to create directory and cd into it
cnc() {
	mkdir -p "$1"
	cd "$1" || return
}

# Function to encrypt a file or directory using GPG
genc() {
	# Check if an argument is passed
	if [ $# -ne 1 ]; then
		echo "Usage: genc <file_or_directory>" >&2
		return 1
	fi

	# If the argument is file then directly encrypt it
	# else if it's directory then archive it and then encrypt
	# else return with error message
	if [ -f "$1" ]; then
		filename=$(basename "$1")
		encrypted_file="${filename}_$(date +'%d_%m_%Y').gpg"
		gpg --symmetric --no-symkey-cache --cipher-algo AES256 --output "$encrypted_file" "$1"
		echo "File '$filename' encrypted successfully. Encrypted file saved as '$encrypted_file'"
	elif [ -d "$1" ]; then
		directory=$(basename "$1")
		archived_dir="${directory}_$(date +'%d_%m_%Y').tar"
		encrypted_dir="${archived_dir}.gpg"
		tar -cf "$archived_dir" "$1"
		gpg --symmetric --no-symkey-cache --cipher-algo AES256 --output "$encrypted_dir" "$archived_dir"
		rm -f "$archived_dir"
		echo "Directory '$directory' contents encrypted successfully. Encrypted file saved as '$encrypted_dir'"
	else
		echo "Error: '$1' is neither a file nor a directory" >&2
		return 1
	fi
}

# Function to decrypt an encrypted file or directory using GPG
gdec() {
	# Check if an argument is passed
	if [ $# -ne 1 ]; then
		echo "Usage: gdec <encrypted_file_or_directory>" >&2
		return 1
	fi

	# If the argument is file then directly decrypt it
	# else if it's directory then unarchive it and then decrypt
	# else return with error message
	if [ -f "$1" ] && [[ "$1" == *.tar.gpg ]]; then
		decrypted_dir="decrypted_$(basename "$1" .tar.gpg)"
		gpg --decrypt --no-symkey-cache "$1" | tar -xvf -
		echo "Directory '$decrypted_dir' decrypted successfully"
	elif [ -f "$1" ]; then
		gpg --no-symkey-cache "$1"
		echo "File '$1' decrypted successfully"
	else
		echo "inside else"
		echo "Error: '$1' is not a valid encrypted file or directory" >&2
		return 1
	fi
}

# Function to search and cd into all directories using fzf
fcd() {
	local dir
	dir=$(fd --hidden --type directory "$1" 2>/dev/null | fzf +m --reverse) && cd "$dir" || return
}

# Function to preview git commits
gci() {
	_gitLog() {
		git log \
			--graph \
			--color=always \
			--format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"
	}

	local _gitHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1 | tr -d '\n'"
	local _viewGitLog="$_gitHash |
		xargs -I % sh -c 'git show --color=always % | delta --no-gitconfig --tabs 2'"

	_gitLog "$@" |
		fzf --reverse --tiebreak=index --no-multi \
			--ansi --preview="$_viewGitLog" \
			--header "enter: view commit, C-y: copy hash, C-o: toggle-preview" \
			--bind "ctrl-s:toggle-sort,ctrl-r:toggle-preview-wrap,ctrl-o:toggle-preview" \
			--bind "ctrl-u:page-up,ctrl-d:page-down" \
			--bind "ctrl-f:preview-page-up,ctrl-b:preview-page-down" \
			--bind "enter:execute:$_viewGitLog | less -R" \
			--bind "ctrl-y:execute:$_gitHash | xsel --clipboard"
}
